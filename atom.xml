<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>HUANGWANG&#39;S BLOG</title>
  
  
  <link href="https://pstudio.me/atom.xml" rel="self"/>
  
  <link href="https://pstudio.me/"/>
  <updated>2024-10-28T01:26:52.176Z</updated>
  <id>https://pstudio.me/</id>
  
  <author>
    <name>huangwang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python中的消息队列工具</title>
    <link href="https://pstudio.me/2021/03/queue/"/>
    <id>https://pstudio.me/2021/03/queue/</id>
    <published>2021-03-23T16:59:16.000Z</published>
    <updated>2024-10-28T01:26:52.176Z</updated>
    
    <content type="html"><![CDATA[<h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><ul><li><p>未使用消息队列工具时</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">用户发请求---&gt;服务端接受处理---&gt;服务端处理(花很长时间)---&gt;用户收到结果</span><br></pre></td></tr></table></figure><p>当服务端处理需要消耗比较长的时间且大量消耗CPU资源时，客户端与服务端的连接需要一直保持，同时，当大量的请求涌入时，可能会造成拥堵或者资源耗尽，此时则需要对客户端提交的请求进行有序的处理，引入消息队列工具。<span id="more"></span></p></li><li><p>使用消息队列工具后</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">用户发请求---&gt;服务端接受请求---&gt;服务端把要处理的函数以及参数交给task queue，并返回task_id （很快）---&gt;用户收到task_id（请求已受理，但是还未完成，用户可用task_id对请求的状态进行查询）</span><br></pre></td></tr></table></figure><p>用户发多少请求用户说了算，但是具体什么时间真正处理这个请求里的操作服务端说了算。消息队列工具比较适用于比较慢（不管是慢在 I/O 还是慢在 CPU ）的操作，这种操作用户并不急着要结果，但是他在乎的是服务端收到这个请求，并且会在一定时间后完成这个操作。</p></li></ul><h3 id="Python中的常用消息队列工具"><a href="#Python中的常用消息队列工具" class="headerlink" title="Python中的常用消息队列工具"></a>Python中的常用消息队列工具</h3><ul><li>Celery<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Celery是一个简单，灵活且可靠的分布式系统，可以处理大量消息，同时为操作提供维护该系统所需的工具。是一个任务队列，着重于实时处理，同时还支持任务调度。</span><br></pre></td></tr></table></figure>GitHub: <a href="https://github.com/celery/celery">https://github.com/celery/celery</a></li></ul><p>Stars: 16.9k</p><ul><li>RQ (Redis Queue)<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RQ（Redis Queue）是一个简单的Python库，用于对作业进行排队并与工作人员在后台进行处理。它具有Redis的支持，并且设计为具有较低的进入门槛。它可以轻松地集成到您的Web堆栈中。</span><br></pre></td></tr></table></figure>GitHub: <a href="https://github.com/rq/rq">https://github.com/rq/rq</a></li></ul><p>Stars: 7.6k</p><ul><li>huey<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hury是一个任务队列工具，具有简洁的API，支持Redis，SQLite以及内存内存储。</span><br></pre></td></tr></table></figure>GitHub: <a href="https://github.com/coleifer/huey">https://github.com/coleifer/huey</a></li></ul><p>Stars: 3.4k</p><ul><li>Dramatiq<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Dramatiq是Python的后台任务处理库，其重点是简单性，可靠性和性能。</span><br></pre></td></tr></table></figure>GitHub: <a href="https://github.com/Bogdanp/dramatiq">https://github.com/Bogdanp/dramatiq</a></li></ul><p>Stars: 2.5k</p><ul><li>Dask<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Dask是用于Python中并行计算的灵活库。其包含两部分，一是动态任务调度，这类似于 Airflow，Luigi，Celery或Make，但针对交互式计算工作负载进行了优化。二是“大数据”集合（如并行数组，数据框和列表），将诸如NumPy，Pandas或Python迭代器之类的通用接口扩展到内存或分布式环境。这些并行集合在动态任务计划程序之上运行。</span><br></pre></td></tr></table></figure>GitHub: <a href="https://github.com/dask/dask">https://github.com/dask/dask</a></li></ul><p>Stars: 8.1k</p><hr><p>参考</p><ul><li><a href="https://v2ex.com/t/750920">关于 celery 的应用场景问题</a></li></ul>]]></content>
    
    
    <summary type="html">something in research</summary>
    
    
    
    
    <category term="Tech" scheme="https://pstudio.me/tags/Tech/"/>
    
  </entry>
  
  <entry>
    <title>在Python中如何快速组装稀疏矩阵</title>
    <link href="https://pstudio.me/2021/03/sparse_matrix/"/>
    <id>https://pstudio.me/2021/03/sparse_matrix/</id>
    <published>2021-03-19T16:59:16.000Z</published>
    <updated>2024-10-28T01:26:52.176Z</updated>
    
    <content type="html"><![CDATA[<h2 id="在Python中如何快速组装稀疏矩阵"><a href="#在Python中如何快速组装稀疏矩阵" class="headerlink" title="在Python中如何快速组装稀疏矩阵"></a>在Python中如何快速组装稀疏矩阵</h2><p>在采用Python编写数值计算方法的求解器时，往往需要自己组装求解的刚度矩阵，当矩阵带宽比较大时，采用稠密矩阵（尽管直接组装速度会快些）常常会遇到内存受限的问题。此时，我们会考虑采用稀疏矩阵来存储，这样可以省去为零位置的值，大大节省内存或磁盘的占用。<span id="more"></span><br>在Python中组装刚度矩阵时，这里采用NumPy以及SciPy两个科学计算依赖库。</p><ul><li><p>NumPy</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">NumPy是Python中科学计算的基本软件包。它是一个Python库，提供多维数组对象，各种派生对象（例如蒙版数组和矩阵）以及各种例程，用于对数组进行快速操作，包括数学，逻辑，形状处理，排序，选择，I/O ，离散傅立叶变换，基本线性代数，基本统计运算，随机模拟等等。</span><br><span class="line"></span><br><span class="line">在安装时需注意其Fortran或C++依赖库laspack、bla等是否存在。推荐使用conda进行安装，其默认采用Intel数学核心库进行编译。MKL较OpenBLAS更快以及更稳定。</span><br></pre></td></tr></table></figure></li><li><p>SciPy</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">数值算法和特定领域的工具箱，包括信号处理，优化，统计等。</span><br><span class="line">这里仅使用到Sparse linear algebra模块</span><br></pre></td></tr></table></figure><p>在组装过程中，采用SciPy中的Coo_Matrix构造稀疏矩阵，只需构造row，col以及data。在构造过程中，存在三个难点，在此记录。</p></li><li><p>提取ndarray中的非零元素</p></li></ul><p>比较Python中常用的几种方式的提取效率</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> timeit</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check_speed</span>(<span class="params">a,positions</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;\t Number of nonzero elements:&#x27;</span>,np.<span class="built_in">sum</span>(a&gt;<span class="number">0</span>))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;\t Using cv2:&#x27;</span>, timeit.timeit(<span class="keyword">lambda</span>:cv2.findNonZero((a)).squeeze()[:,<span class="number">0</span>],number=<span class="number">100</span>)/<span class="number">100.0</span>, <span class="string">&#x27;s&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;\t Using numpy nonzero:&#x27;</span>, timeit.timeit(<span class="keyword">lambda</span>:np.nonzero(a)[<span class="number">1</span>],number=<span class="number">100</span>)/<span class="number">100.0</span>, <span class="string">&#x27;s&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;\t Using readily made matrix:&#x27;</span>, timeit.timeit(<span class="keyword">lambda</span>:positions[(np.<span class="built_in">abs</span>(a)&gt;<span class="number">1e-16</span>)[<span class="number">0</span>]],number=<span class="number">100</span>)/<span class="number">100.0</span> ,<span class="string">&#x27;s&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;\t Using readily made matrix:&#x27;</span>, timeit.timeit(<span class="keyword">lambda</span>:np.arange(a.size),number=<span class="number">100</span>)/<span class="number">100.0</span> ,<span class="string">&#x27;s&#x27;</span>)</span><br></pre></td></tr></table></figure><p>output</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Number of nonzero elements: <span class="number">499413</span></span><br><span class="line">Using cv2: <span class="number">0.02275758675998077</span> s</span><br><span class="line">Using numpy nonzero: <span class="number">0.007664396830368787</span> s</span><br><span class="line">Using readily made matrix: <span class="number">0.0030909083294682204</span> s</span><br></pre></td></tr></table></figure><p>可以看出使用readily made matrix的方式速度最快，因为这里处理的是一维数组，对于多维数组而言，cv2为最优，numpy nonzero次之。</p><ul><li>组装row，col，data<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">遍历刚度矩阵中的每一行，将数据填入row，col，data数组中，我们一般采用NumPy中的concatenate方法进行连接，值得注意的是，不应该一边遍历一边连接，最有效的方法应该是将每次遍历的结果Append至列表中，最后采用concatenate一次性连接。</span><br></pre></td></tr></table></figure></li><li>如何让节点的遍历更快速<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">一般而言，遍历每一个点的操作应该是相互独立的，可对这部分进行并行编程，充分利用CPU的多核性能进行计算，Python中可考虑采用multiprocessing模块进行处理。当然，这当中，代码的设计、中间量的内存管理等至关重要。</span><br></pre></td></tr></table></figure></li></ul><hr><p>参考</p><ul><li><a href="https://stackoverflow.com/questions/40631883/fast-way-to-find-nonzero-elements-positions-in-2d-array-in-python">Fast way to find nonzero elements positions in 2d array in Python</a></li><li><a href="https://stackoverflow.com/questions/64350649/fastest-way-to-concatenate-slices-of-numpy-array">Fastest way to concatenate slices of numpy array</a></li></ul>]]></content>
    
    
    <summary type="html">something in research</summary>
    
    
    
    
    <category term="Tech" scheme="https://pstudio.me/tags/Tech/"/>
    
  </entry>
  
  <entry>
    <title>pythonOCC在Ubuntu 18.04上安装记录</title>
    <link href="https://pstudio.me/2020/08/pythonocc_install/"/>
    <id>https://pstudio.me/2020/08/pythonocc_install/</id>
    <published>2020-08-28T00:59:16.000Z</published>
    <updated>2024-10-28T01:26:52.176Z</updated>
    
    <content type="html"><![CDATA[<p>这里记录在Ubuntu 18.04上安装PythonOCC-core的整个过程，方便以后复现。<span id="more"></span></p><h2 id="快速安装"><a href="#快速安装" class="headerlink" title="快速安装"></a>快速安装</h2><h3 id="Python-3-6-amp-3-7"><a href="#Python-3-6-amp-3-7" class="headerlink" title="Python 3.6 &amp; 3.7"></a>Python 3.6 &amp; 3.7</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># first create an environment</span></span><br><span class="line">conda create --name=whatever-name python=3.7</span><br><span class="line"><span class="built_in">source</span> activate whatever-name</span><br><span class="line">conda install -c dlr-sc pythonocc-core=7.4.0</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Python-3-7-amp-3-8"><a href="#Python-3-7-amp-3-8" class="headerlink" title="Python 3.7 &amp; 3.8"></a>Python 3.7 &amp; 3.8</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># first create an environment</span></span><br><span class="line">conda create --name=whatever-name python=3.8</span><br><span class="line"><span class="built_in">source</span> activate whatever-name</span><br><span class="line">conda install -c conda-forge pythonocc-core=7.4.0</span><br></pre></td></tr></table></figure><p>以上两种情况均采用conda安装，十分方便快速，但是有时conda又显得臃肿，尽管我用的是miniconda。</p><h2 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h2><h3 id="依赖安装"><a href="#依赖安装" class="headerlink" title="依赖安装"></a>依赖安装</h3><ul><li>Python 3.6.x or 3.7.x or 3.8.x</li></ul><p>如何安装这里不做赘述，一般Ubuntu 18.04会自带Python 3.6.9</p><ul><li><p>OpenCascade 7.4.0</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 环境依赖安装</span></span><br><span class="line"><span class="built_in">sudo</span> apt-get install software-properties-common</span><br><span class="line"><span class="built_in">sudo</span> apt-get install libtool autoconf automake gfortran gdebi</span><br><span class="line"><span class="built_in">sudo</span> apt-get install gcc-multilib libxi-dev libxmu-dev libxmu-headers</span><br><span class="line"><span class="built_in">sudo</span> apt-get install libx11-dev mesa-common-dev libglu1-mesa-dev</span><br><span class="line"><span class="built_in">sudo</span> apt-get install libfontconfig1-dev</span><br><span class="line"><span class="comment"># Freetype 安装（2.8）</span></span><br><span class="line"><span class="built_in">sudo</span> apt install freetype2-demos</span><br><span class="line"><span class="comment"># Tcl/TK 安装 （8.6）</span></span><br><span class="line"><span class="built_in">sudo</span> apt-get install tcl tcl-dev tk tk-dev</span><br><span class="line"><span class="comment"># OpenCascade 安装</span></span><br><span class="line">下载OpenCascade源码从https://www.opencascade.com/content/download-center</span><br><span class="line">tar xf opencascade-7.4.0.tar.gz</span><br><span class="line"><span class="built_in">mkdir</span> tmp</span><br><span class="line"><span class="built_in">cd</span> tmp</span><br><span class="line">cmake ../opencascade-7.4.0</span><br><span class="line">make</span><br><span class="line">make install</span><br><span class="line"><span class="comment"># SWIG 安装</span></span><br><span class="line"><span class="built_in">sudo</span> apt-get install -y swig</span><br></pre></td></tr></table></figure><h3 id="PythonOCC安装"><a href="#PythonOCC安装" class="headerlink" title="PythonOCC安装"></a>PythonOCC安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git://github.com/tpaviot/pythonocc-core.git</span><br><span class="line"><span class="built_in">cd</span> pythonocc-core</span><br><span class="line"><span class="built_in">mkdir</span> cmake-build</span><br><span class="line"><span class="built_in">cd</span> cmake-build</span><br><span class="line">cmake ..</span><br><span class="line">make</span><br><span class="line"><span class="built_in">sudo</span> make install</span><br></pre></td></tr></table></figure><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3></li><li><p>cmake 安装</p></li></ul><p>由于pythonocc编译时cmake版本需要在3.14以上，而Ubuntu 18.04采用apt直接安装的版本低于此版本，需要重新安装。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 卸载旧的cmake</span></span><br><span class="line"><span class="built_in">sudo</span> apt purge --auto-remove cmake</span><br><span class="line"><span class="comment"># Obtain a copy of the signing key</span></span><br><span class="line">wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2&gt;/dev/null | gpg --dearmor - | <span class="built_in">sudo</span> <span class="built_in">tee</span> /etc/apt/trusted.gpg.d/kitware.gpg &gt;/dev/null</span><br><span class="line"><span class="comment"># For Ubuntu Bionic Beaver (18.04)</span></span><br><span class="line"><span class="built_in">sudo</span> apt-add-repository <span class="string">&#x27;deb https://apt.kitware.com/ubuntu/ bionic main&#x27;</span></span><br><span class="line"><span class="comment"># Update and install</span></span><br><span class="line"><span class="built_in">sudo</span> apt update</span><br><span class="line"><span class="built_in">sudo</span> apt install cmake</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://github.com/tpaviot/pythonocc-core/blob/master/INSTALL.md">pythonocc-core安装指南</a></li><li><a href="https://www.realglitch.com/2020/04/how-to-install-opencascade-7-4-on-ubuntu-18-04-lts/#:~:text=Download%20the%20OpenCascade%207.4%20source,start%20configuration%20with%20key%20c.">opencascade安装指南</a></li><li><a href="http://ubuntuhandbook.org/index.php/2017/06/install-freetype-2-8-in-ubuntu-16-04-17-04/#:~:text=Install%20FreeType%202.8%20via%20PPA%20in%20Ubuntu%3A&text=Type%20in%20your%20password%20(no,ppa%20description%20and%20hit%20Enter.&text=Or%20you%20can%20remove%20PPA,Updates%20utility%20Other%20Software%20tab.">freetype安装指南</a></li><li><a href="https://zoomadmin.com/HowToInstall/UbuntuPackage/swig">swig安装指南</a></li></ul>]]></content>
    
    
    <summary type="html">something in life</summary>
    
    
    
    
    <category term="Share" scheme="https://pstudio.me/tags/Share/"/>
    
  </entry>
  
  <entry>
    <title>看到老照片的所想</title>
    <link href="https://pstudio.me/2020/08/memory/"/>
    <id>https://pstudio.me/2020/08/memory/</id>
    <published>2020-08-10T15:59:22.000Z</published>
    <updated>2024-10-28T01:26:52.176Z</updated>
    
    <content type="html"><![CDATA[<p>今天晚上完成了一直打算完成的一件事，即考虑到手中的移动硬盘年份较久远了，打算将其中的内容拷贝到Onedrive中备份。不自觉地打开了一些比较古老的照片，想起了一些往事。<span id="more"></span></p><p>硬盘中一直存放着和TA的记忆，那时大家都很年轻，照片的神情上也透着一丝嫩稚，十分可爱，作为记忆，我随即发给了TA，TA是一个很感性的人，一开始还有说有笑，转眼触图生情吧，说起了我们的记忆，十分怀念，感慨时间让你我变化之大。时间尽管磨平了我们生活中激情的棱角，但是，时间的产物却依然能够唤醒我们内心的情感。</p><p>我感触也挺深的，不曾发现，时间让我的心境发生了变化，以往，无论我们之间发生什么事情，我总是愿意做妥协的一方，当然，现在也是妥协的一方，但现在，偶尔却产生了情绪上的波动。仔细想想，可能是现在接触的事情多了，粘性也变小了，不想大学时候我们总是粘在一起，随时都可以在一起，而现在不太一样，我们都因为学习生活中的事情而变得忙碌起来，也是，mochan对手头上要做的事情会特别投入，而且极不喜欢别人从中打扰。</p><p>最近的生活（可以追溯至本阶段入学以来），极少有事情能够激发我的活力去全身心投入，因为身边的杂事太多了吧，想静下心来做点自己的事情已经很难了，感受不到以往解决问题的快乐。在白天的时候，想着安排的事能够静下心来解决，做着做着随着身边的各种事情接踵而至，然后就自然而然地被推到了晚上来完成，结果晚上又懒癌发作，一直积累着一些坑。其实，说到底，还是事情不能极大地触发我的兴趣和积极性，好比前段时间，协助导师完成一些数值上的计算，新的东西，难度又适中，一股脑地马上就完成了，也感觉收获满满。而现在工作上的事情，一方面在我的知识范围以及能力范围内，我感觉到了困难，同时，步步紧逼的DeadLine也让我不知所措，尽管兴趣还是存在的，但是，收获感已经好久没有感受到了。</p><p>最后，老照片中还发现了可爱的Brother，那时候还是很小的时候，哈哈哈。</p>]]></content>
    
    
    <summary type="html">看到了一些比较古老的照片，想起了一些往事，感想油然而生。</summary>
    
    
    
    
    <category term="Secret" scheme="https://pstudio.me/tags/Secret/"/>
    
  </entry>
  
  <entry>
    <title>采用Docker搭建Wordpress后宿主机反代配置</title>
    <link href="https://pstudio.me/2020/08/wordpress/"/>
    <id>https://pstudio.me/2020/08/wordpress/</id>
    <published>2020-08-06T02:59:22.000Z</published>
    <updated>2024-10-28T01:26:52.176Z</updated>
    
    <content type="html"><![CDATA[<p>最近接触到一个采用wordpress建站的任务，在内容构建完成后，正式部署时遇到了不少的问题，最后采用Caddy反代解决。<span id="more"></span></p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>网站搭建完成后，依据以往的建站经验，首先想到的是采用nginx做一个简单的反代即可，不曾想到反代wordpress时需要考虑对加载的资源URL进行替换，可惜ngnix配置知识半桶水，不知如何下手，通过搜索引擎多次寻求解决方案未果时，想到以前采用Caddy反代Discord时也遇到过类似的问题，遂采用当初Caddy的方案入手解决，顺利实现反代。</p><h2 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a>具体步骤</h2><ul><li>配置好Wordpress,此时wordpress中的URL地址均为http://<IP>:<Port></li><li>下载Caddy，并链接至<code>/usr/local/bin</code></li><li>创建CaddyFile,完善配置，如下<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">example.com &#123;</span><br><span class="line">    tls &lt;email&gt;</span><br><span class="line">    proxy / http://&lt;IP&gt;:&lt;Port&gt; &#123;</span><br><span class="line">        transparent</span><br><span class="line">                header_upstream Host &#123;proxy_host&#125;</span><br><span class="line">                header_upstream X-Real-IP &#123;remote&#125;</span><br><span class="line">                header_upstream X-Forwarded-For &#123;remote&#125;</span><br><span class="line">                header_upstream X-Forwarded-Proto &#123;scheme&#125;</span><br><span class="line">                header_downstream -Access-Control-Allow-Origin</span><br><span class="line">                header_upstream Accept-Encoding identity</span><br><span class="line">                header_upstream Origin http://&lt;IP&gt;:&lt;Port&gt;</span><br><span class="line">          header_downstream -Content-Security-Policy</span><br><span class="line">        websocket</span><br><span class="line">    &#125;</span><br><span class="line">    filter rule &#123;</span><br><span class="line">         content_type text/.*</span><br><span class="line">         search_pattern &lt;IP&gt;:&lt;Port&gt;</span><br><span class="line">         replacement example.com</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>运行命令<code>[sudo] caddy --conf CaddyFile</code>，执行后会自动生成证书，并开启Automatic HTTPS特性。</li><li>此时网站已经反代成功，不过还存在一些小问题，比如某些页面中存在http的资源URL，会导致资源无法加载，搜索得到该<a href="https://developers.google.com/web/fundamentals/security/prevent-mixed-content/fixing-mixed-content?hl=zh-cn">解决方案</a>，采用了其中的一种，在网页的Head中加入如下meta，因为我能确保所有升级后的https链接有效。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta http-equiv=&quot;Content-Security-Policy&quot; content=&quot;upgrade-insecure-requests&quot;&gt;</span><br></pre></td></tr></table></figure></li><li>这样，网站的反代工作基本完成。</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本次反代实践在nginx上花费了太多的时间，最后又不得不放弃，不得不悔恨对ngnix使用原理以及浏览器调试信息分析不熟悉，需加强对nginx的配置参数的熟悉以及理解一些参数的用法，不然依赖搜索引擎都不知问题在哪以及如何下手。幸运的是也如期完成了该项工作。</p>]]></content>
    
    
    <summary type="html">Wordpress反代遇到的坑</summary>
    
    
    
    
    <category term="Linux" scheme="https://pstudio.me/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>记一次腾讯云实例迁移</title>
    <link href="https://pstudio.me/2019/06/qcloud/"/>
    <id>https://pstudio.me/2019/06/qcloud/</id>
    <published>2019-06-26T02:59:22.000Z</published>
    <updated>2024-10-28T01:26:52.176Z</updated>
    
    <content type="html"><![CDATA[<p>迫于最近的一台Debian 9的实例即将过期，本着节约资金的原则，又开了一年的学生机。<span id="more"></span></p><h3 id="原由"><a href="#原由" class="headerlink" title="原由"></a>原由</h3><p>1核1G, 50G数据盘，50G系统盘，当初搭建环境的时候，也是考虑十分不足，为今天埋下了坑。因为Mysql上要存储大量的数据（高达30G），故将mysql所在的文件夹<code>/usr</code>放在了数据盘，并清空了系统盘上的<code>/usr</code>内的所有文件（掩面）。</p><h3 id="行动"><a href="#行动" class="headerlink" title="行动"></a>行动</h3><p>一开始迁移的时候是这么考虑的，将系统盘制作镜像，数据盘制作快照并新建硬盘，挂载在新的实例上。殊不知却忽视了制作系统镜像时的小提示</p><blockquote><p>Linux实例制作自定义镜像请确认 /etc/fstab不包含数据盘配置，否则会导致使用该镜像创建的实例无法正常启动。如果有挂载数据盘， 需要注释或删掉/etc/fstab中自行配置的数据盘的相关配置。</p></blockquote><p>用过aws之后，体验qcloud，不得不吐槽一番，其制作镜像的速度真慢。当然，我这种情况，就算注释掉了<code>/etc/fstab</code>也是没用的，因为系统盘的<code>/usr</code>被我清空了。所以才导致了一下的情况。</p><ul><li>重装系统过程中，一直提示重装系统，导致我边安装边吐槽良心云真垃圾。</li><li>假的重装完毕后，采用<code>ssh</code>无法登入，一直提示<code>time out</code></li></ul><p>此时，我也大概了解到是因为/usr确实的缘故，但Linux技术实在比较菜，不知如何下手，当时就想将原实例系统盘扩容，再将数据盘内/usr的数据迁移至系统盘，这里不得不说，qcloud居然不支持直接对系统盘扩容，只能在重装系统的时候对系统盘扩容。考虑到风险，还是先备份了全部盘，并制作了镜像，开始尝试对原实例进行重装系统，此时，考虑到原实例会自动挂载数据盘，重装后应该也不会有问题吧，结果，问题依旧，原实例都无法启动操作了。至此，深感无奈，感觉自己没什么能做的了（当时还不知道使用VNC），是不是只能在新实例上挂载数据盘，手动cp了，系统盘快照不能制作新硬盘，其上的数据是不是没希望了，当时感觉好绝望。</p><p>没办法，只能发工单了，还好，工单解决还比较顺利，也让我了解到了VNC以及Linux的各种启动模式。还行，比较顺利地完成了对原实例扩容。</p><p>接下来就是将数据盘上的内容全部转移到系统盘上，数据盘上<code>/usr</code>是无法直接umount的，我也是一头雾水，当时，接触到了VNC，一直想在其上突破，只可惜以失败告终。好在得到了Monad大佬的帮助，瞬时茅塞顿开。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir /tmp/root                # 新建一文件夹用来挂载系统盘</span><br><span class="line">mount --bind / /tmp/root       # 将系统盘挂载至上面新建的文件夹</span><br><span class="line">rsync -av /usr /tmp/root/usr   # 将数据盘上的数据拷贝至系统盘中的/usr文件夹</span><br></pre></td></tr></table></figure><p>注释或删掉<code>/etc/fstab</code>中自行配置的数据盘的相关配置，再重启实例大概就解决了。</p>]]></content>
    
    
    <summary type="html">跨可用区实例迁移</summary>
    
    
    
    
    <category term="Linux" scheme="https://pstudio.me/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>毕业季</title>
    <link href="https://pstudio.me/2019/04/3years/"/>
    <id>https://pstudio.me/2019/04/3years/</id>
    <published>2019-04-09T12:59:22.000Z</published>
    <updated>2024-10-28T01:26:52.176Z</updated>
    
    <content type="html"><![CDATA[<p>转眼间，宝贵的三年学习过去了。一个阶段的学习即将结束，也即将进入生活的另一阶段。以此自勉，愿自己能在今后走得更好！<span id="more"></span></p><p>记得，研究生的入学也是一波三折的，从起初自己的准备不足，到落选，又到侥幸补录。想想，也许这真的是上帝的安排，硬是要满足我不愿去工作的心意。大学毕业的那个暑假，极度沉迷于Minecraft，可以说是废寝忘食，现在想想，也真的是佩服自己当时的状态。因为喜欢，所以沉迷。我倒不沉迷于游戏的玩法，倒是当时的氛围让我沉迷，觉得认识一群有趣的朋友也是一件很好的事情。说到沉迷，在学习中，也是，当时刚接触无网格法时，一个劲地想去弄懂它，真正投入的时候应该是研究生一年级快结束的时候，已经全然没有事情了，每个揣着书本，嚼着Matlab代码，感觉也挺不错的，因为有目标同时又有兴趣，所以沉迷。后面接触Python也是，一年级暑期快结束，初学Python后，尝试将Matlab代码迁移到Python，一个小问题，折腾到天亮，也是不错的感觉，搞定的时候的心情真的是拨开云雾见青天的感觉，一晚熬夜的睡意也没了，而且第二天可以一切按部就班。以上应该是研究生学习中最深刻的经历。</p><p>我的研究生学习，是伴随着摸鱼过来的，对Minecraft的喜爱不曾减弱过，只是，沉迷的氛围已不再。这期间，开始接触Java，Linux以及各种新奇待折腾的东西，将学习的时间，折腾在这上面，正所谓，生生不息，摸鱼不止。对于自己喜爱的东西，都会迫不及待地想完成，对于自己无感的事物，则只好归结为懒癌作祟。从2017年初，开始接手竹萌，从半调子的Linux技术，到现在的懵懵懂懂了，学会了如何自主地去查找答案，解决问题；从2017年暑期开始接触Java，到现在也可以有模有样地写个Plugin了；从处理事情的不成熟，到现在也会思考如何将事情弄得更加完善。游戏已经成为我们这一代必不可少的一部分了，它不仅仅是游戏而已了，不仅仅只是消磨时间的工具，其也成为了学习生活的重要组成部分。从生活中学习，在学习中生活！研究生的第二年在学习上倒没有太多的进展了，开始投入到了创新创业的队伍了，至今为止，我还是觉得这是不太可靠的途径，但还是觉得，咬咬牙，挺过去，愿自己能够看到希望，能够全身心地投入点吧！不过，与其看作是创业的尝试，不如想作是生活中的一种历练，毕竟，经历了一些不一样的东西，结交了一些不一样的朋友。</p><p>鱼也不摸的研究生第三年，开始着手毕业论文的工作，但是，也并没有全身心投入其中，开始喜欢什么事都不想的感觉，真的是养老的状态，以致每天的摄入的能量没用完，导致了现在发生了以前想都不敢想的事（掩面）。所幸的是，毕业论文也如期完成了，希望后续的事不要再波折吧。打算继续学习的我，可惜又遇到了靠硕士时一样的曲折，唉，正也验证了无论什么事，都得有足够的付出，才能有所收获。不是不报，时候未到！希望近期好运吧！</p><p>总结这三年的收获，收获了一群有趣的朋友，一群热血的积极向上的学弟学妹，或者一些有趣的自称年轻人的老年人，当然，最重要的还是遇到了好的老师们，特别幸运，我越来越相信这冥冥之中宝贵的缘分了，从硕士入学开始，到现在，真的是Marvel。</p>]]></content>
    
    
    <summary type="html">something in life</summary>
    
    
    
    
    <category term="Share" scheme="https://pstudio.me/tags/Share/"/>
    
  </entry>
  
  <entry>
    <title>这人，这事，这风景</title>
    <link href="https://pstudio.me/2018/10/thought/"/>
    <id>https://pstudio.me/2018/10/thought/</id>
    <published>2018-10-24T16:17:16.000Z</published>
    <updated>2024-10-28T01:26:52.176Z</updated>
    
    <content type="html"><![CDATA[<p>有时候，我总是对自己说，为啥不把技术整理下，写成技术Blog呢？但是，你也知道，我这种热爱技术，但却对技术总是浅尝辄止的人，是写不出什么有深度的技术文的。<br>所以说呢，还是把在生活中的牢骚写在这里实在点。</p><ul><li>慢慢写，先咕一会。</li></ul><h3 id="11-15-2018"><a href="#11-15-2018" class="headerlink" title="11/15/2018"></a>11/15/2018</h3><p>我又回来了，这段时间呢，主要沉迷于完成自己的毕业论文。想了想，我这一年多，我感觉充实的日子并不多，大概有几个时间点，2017.6-2017.7， 2017.9-2017.10， 2018.12-2018.1， 至此，好像就没了。其余时间，感觉自己摸鱼去了。有的时候，当一天结束了，我会问我自己，这一天自己学到了什么呢？完成了什么呢？大多数时间里，我会因为这个问题而感到空虚。尽管摸鱼是一件特别舒服的事情，但是，实在是无法比拟学到东西，完成东西所感受的乐趣的。在最近几天，我似乎又感受到了一点充实，所以说我沉迷了。其实，还是一些问题得到了解决，但又发现，其实这个问题早就已经解决好了，然而我却没有发现。太多的“无用功”差点让我失去了信心。</p>]]></content>
    
    
    <summary type="html">something in life</summary>
    
    
    
    
    <category term="thought" scheme="https://pstudio.me/tags/thought/"/>
    
  </entry>
  
  <entry>
    <title>Debug Python in Visual Studio Code</title>
    <link href="https://pstudio.me/2018/09/restore/"/>
    <id>https://pstudio.me/2018/09/restore/</id>
    <published>2018-09-10T17:17:16.000Z</published>
    <updated>2024-10-28T01:26:52.176Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Some-Nonsense"><a href="#Some-Nonsense" class="headerlink" title="Some Nonsense"></a>Some Nonsense</h3><p>Before I usually debug python in PyCharm, it is bloated but convenient. Until I reinstall my Laptop’s system because of some repairs, I want to try some new method to program. By the way, VS Code is a good IDE or Code Editor, and I used before.</p><h3 id="Install-Python-on-Windows-10"><a href="#Install-Python-on-Windows-10" class="headerlink" title="Install Python on Windows 10"></a>Install Python on Windows 10</h3><p>Just select the version you want and download the install file on this <a href="https://www.python.org/">website</a>.</p><h3 id="Configuring-Environment-Variables"><a href="#Configuring-Environment-Variables" class="headerlink" title="Configuring Environment Variables"></a>Configuring Environment Variables</h3><p>Enter Environment Variables then edit user path. add the path of python to it.</p><h3 id="Install-VS-Code"><a href="#Install-VS-Code" class="headerlink" title="Install VS Code"></a>Install VS Code</h3><p>Just finish it via this <a href="https://code.visualstudio.com/">website</a> and install Python extension in VS Code.</p><h3 id="Start-Your-“Hello-World”"><a href="#Start-Your-“Hello-World”" class="headerlink" title="Start Your “Hello World”"></a>Start Your “Hello World”</h3><ul><li><p>create a work folder<br><img src="https://i.loli.net/2018/09/11/5b96ac93914a0.png" alt="1.png"></p></li><li><p>Open It in VS Code<br><img src="https://i.loli.net/2018/09/11/5b96ac938e2fd.png" alt="2.png"></p></li><li><p>Now Add Your First Python Script File<br><img src="https://i.loli.net/2018/09/11/5b96ac932eab1.png" alt="3.png"></p></li><li><p>Type Code on It<br><img src="https://i.loli.net/2018/09/11/5b96ac9331276.png" alt="4.png"></p></li><li><p>Debug or Run</p><p>In this step, we can change settings in lanuch.json. Detail on <a href="https://code.visualstudio.com/docs/python/debugging">this</a>.</p><p><img src="https://i.loli.net/2018/09/11/5b96ac9332839.png" alt="5.png"><br><img src="https://i.loli.net/2018/09/11/5b96ac9393c04.png" alt="6.png"></p></li></ul><h3 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h3><ul><li>You can install many extensions in Marketplace.</li><li>Not only for Python</li><li><a href="https://code.visualstudio.com/docs/python/environments">Configuring Python environments</a></li></ul>]]></content>
    
    
    <summary type="html">only record</summary>
    
    
    
    
    <category term="Record" scheme="https://pstudio.me/tags/Record/"/>
    
  </entry>
  
  <entry>
    <title>Sad--&gt;Empty--&gt;Cyberslacker</title>
    <link href="https://pstudio.me/2018/08/sad/"/>
    <id>https://pstudio.me/2018/08/sad/</id>
    <published>2018-08-04T17:30:16.000Z</published>
    <updated>2024-10-28T01:26:52.176Z</updated>
    
    <content type="html"><![CDATA[<p>The title of this blog has been determined almost one month ago, I was very sad because of my mistake in one competition’s registration those days. <span id="more"></span>那时，我的内心前所未有的愧疚感，因为，我那时对一些事情不太上心。</p><p>近期，参与了一场会议的组织工作，真的受益匪浅，认识了一群真正的大佬，一群真正值得尊重的学者，对于各地文化的差异，我也有了更深的认识，同时，我对自己辣鸡的Chiglish表示堪忧，面对一口流利的英语，我呆若木鸡，不知所措。我不立Flag，但是，我必须得每天为自己的English留点时间。记得上次参与了一个某贝上的挑战，坚持21天，可惜，时间一过就放弃了，前功尽弃。我不知道自己能否坚持下去。Try my best. 会议期间，作为志愿者，尽管比较累，但还是感觉很充实，在与前辈们待在一起实在是特别值得。尽管可能在知识上可能没用大的作用，但是，在点点滴滴中，感受到了学问的严谨、细致等，同时也感受到了东西方人在表述问题过程中的差异性。</p><p>仔细回想，其实我的7月依旧是Empty，尽管一堆琐事，但是，事情越多，对于拖延症晚期的我来说，事情的完成度越低，直到达到最后期限，痛苦煎熬的几天。伴随着拖延症，必然会成为一名Cyberslacker. 还好，既是好事，也是坏事，我的小本本出现点小的毛病，严重的强迫症患者无法忍受的毛病（尽管不影响使用）。好事是让我摸鱼不那么方便了，坏事是我不得不清空我的电脑（十分不好的事，尽管不多数数据都在Onedrive）。这大概是我PC进医院前的祝福吧。最近，感觉我们的group越来越因吹斯挺，分组篮球赛（黑人问好脸），对于我这种不喜欢运动的死宅…… 最后，特别感谢Denis的ice cream (DQ家的东西为啥份量如此良心).</p><p>八月，期望看到不那么空虚的自己。</p>]]></content>
    
    
    <summary type="html">something in life</summary>
    
    
    
    
    <category term="Cyberslacker" scheme="https://pstudio.me/tags/Cyberslacker/"/>
    
  </entry>
  
  <entry>
    <title>如何优雅地使用VS Code 书写 Latex</title>
    <link href="https://pstudio.me/2018/07/docidaci/"/>
    <id>https://pstudio.me/2018/07/docidaci/</id>
    <published>2018-07-02T17:30:16.000Z</published>
    <updated>2024-10-28T01:26:52.176Z</updated>
    
    <content type="html"><![CDATA[<p>最近在学习上遇到了一些疑惑，总结了一些ideas，特记录于此。<span id="more"></span></p><p>此处删减数万字（删库换主题咯！）。</p><p>前段日子，老师们都说写论文要用Latex，同时也推荐这个玩意。听大佬们交谈间，推荐使用Scientific Word，可以像word一样编写Latex。在Google上搜搜，Student Usage $198.00，有点小贵，不想狠心买下。当然，作为一个geek患者，又怎么会用这么不cool的玩意呢，当然要用Geek的方法呢！</p><h4 id="Step-One"><a href="#Step-One" class="headerlink" title="Step One"></a>Step One</h4><p>在Google上看了一圈大家都是用什么工具书写Latex，发现不少人使用VS Code呢。但是，近期又是一系列琐事，同时又不想折腾（天啦噜）。直至今天，摸鱼时决定探索下这玩意。</p><p>下载VS Code 安装后，我们可以在扩展库中找到敲击多好用的扩展。这次我使用的是LaTeX Workshop 。</p><p>当然，这玩意安装前得按照Requirements里面得要求一步步安装。不然会功能不完全。</p><p>备注：MikTex时安装SyncTex要使用<a href="http://tex.stackexchange.com/questions/338078/how-to-get-synctex-for-windows-to-allow-atom-pdf-view-to-synch#comment877274_338117">特别的办法</a>（choco install synctex)，这样可以同步预览。</p><h4 id="Step-Two"><a href="#Step-Two" class="headerlink" title="Step Two"></a>Step Two</h4><p>上手，在Web上下载一份Latex模板就可以慢慢地入手了。</p><p><img src="https://i.loli.net/2018/07/03/5b3a58ebec2f1.png" alt="dc.png"></p><p>Oysasuminasai.</p><p>Flag: 撒哈拉的沙漠。</p>]]></content>
    
    
    <summary type="html">something in life</summary>
    
    
    
    
    <category term="Cyberslacker" scheme="https://pstudio.me/tags/Cyberslacker/"/>
    
  </entry>
  
  <entry>
    <title>看（实）似（则）忙（摸）碌（鱼）</title>
    <link href="https://pstudio.me/2018/06/bp/"/>
    <id>https://pstudio.me/2018/06/bp/</id>
    <published>2018-06-08T16:59:16.000Z</published>
    <updated>2024-10-28T01:26:52.176Z</updated>
    
    <content type="html"><![CDATA[<p>本来在5月13号就打算写个blog的，但是，以我咕咕咕的特性，最终以弃坑收场。<span id="more"></span></p><p>现在的状态：这几天刚结束了学校的互联网+大赛，回顾整个过程，我在其中发挥了微不足道的作用，尴尬的却是，我成为了专业领奖（大雾）。当然，收获还是有的，尽管绝大部分的准备工作我参与的很少，大概都是老师的杰作吧（其实这一点我很是尴尬，说让我多负责多参与，但是老师还是全权负责，23333，老师的意志主导了整个团队。这其中，我发现我们和老师在很多问题上的想法是不同的，但是，我们有的时候无法将自己的想法完美表现出来，以至于老师老练地压制了我们）。我们在其中基本是意志的执行者，而不是行动者。我一直有个疑问，这类比赛的意义何在？激发同学们的创业激情？吸引投资人？同时，比赛的评比也是一个大问题，评判一个企业or公司成功与否的标准，不应该是看其创造的经济效益与社会价值？然而，我们的国度在这一问题上却硬是要以一纸PPT论英雄？（还有很多想法，但是思维很混乱，无法表达出来）。太多泛泛而谈的东西了，现在的我，就像茫茫大海的迷失方向的小船，漫无目的地漂泊着，不知道该飘到哪去。</p><p>生活上，我是如此的佛系，我从不在乎任何人或者任何事的任何看法，一切看似那么的无所谓，我觉得现在的我简直在浪费时间，因为我并没有从时间中获得任何东西或者是我不想追求的东西，我艰难地前行着。同时，加上一点我的懒癌以及拖延属性，我时常会把一些有点小障碍的事抛之脑后。我热爱与敬仰严谨，研究生期间，大概我收获最大的当属变得更加严谨了，这是各方面的交往所影响的，学习上、游戏里等等，但我又忍受不了单方面严谨的行为，在一些小细节上锱铢必较，但是在一些是是非非的问题上却夸夸其谈。</p><p>嗯哼，还是说点有趣的事情咯，最近团队来了新朋友，简直老司机，阅历极深（游戏库庞大），鉴于大佬推荐，最近玩了玩Oxygen not including，很有趣，很复杂，强烈推荐！</p><p>一堆事围绕着我，目前的清单，无从下手：</p><ul><li>断裂问题的裂纹扩展模拟</li><li>团队的各种报名，各种大雾</li><li>软件开发目前停滞</li><li>……</li></ul><p>坑太大，不忍写完。</p><p>全世界，晚安，Oyasumi.</p>]]></content>
    
    
    <summary type="html">something in life</summary>
    
    
    
    
    <category term="Share" scheme="https://pstudio.me/tags/Share/"/>
    
  </entry>
  
  <entry>
    <title>当使用G Suite时开启Gboard字典同步</title>
    <link href="https://pstudio.me/2018/03/gboard/"/>
    <id>https://pstudio.me/2018/03/gboard/</id>
    <published>2018-03-29T12:17:16.000Z</published>
    <updated>2024-10-28T01:26:52.176Z</updated>
    
    <content type="html"><![CDATA[<h3 id="废话部分"><a href="#废话部分" class="headerlink" title="废话部分"></a>废话部分</h3><p>当Gboard(beta)支持中文输入时，我毫不犹豫地卸掉了Google Pinyin Input，开启了全新地彻底地转向Gboard之旅。这期间，一个重要的问题显现———输入法字典的同步。当然，我并不期待字典库从Pinyin Input迁移至Gboard，只想在Gboard上开启字典同步。<span id="more"></span>不料到，由于G Suite 安全策略的问题，字典同步变成了灰色的，并显示“Sync is not available for devices with G Suite accounts”。我因为前不久入坑了G Suite，将G Suite 账号登陆在爪机上方便接受邮件。当然，还有一个非G Suite账号作为主力。</p><p><img src="https://i.loli.net/2018/03/29/5abcc84a0045f.png" alt="disabled"></p><p>顿时，强迫症发作，整个人都不好受了。但当时以为是G Suite管理权限的问题，在控制台修改后，以为是生效延迟的问题，后来也咕咕咕了，但是，心中一直还是耿耿于怀的。直到今天，再次心血来潮，想彻底把该问题给解决掉。同时，又要保持G Suite 账户登录，主要还是考虑到需要接收G Suite 账号的邮件，同时，我只用Inbox邮件客户端。</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>通过查阅网络上的各种问答，终于找到一靠谱的办法，如下（本解决方案至少需要有一非G Suite Google 账号）：</p><ul><li>删除/注销除非G Suite账号之外的所有其他Google 账号。</li><li>卸载GBoard键盘 App。（如果是内置的App，则卸载更新，清除数据）</li><li>清除Google Play 商店的数据和缓存。</li><li>重新安装或更新GBoard键盘。</li><li>设置字典同步。</li><li>登陆其他账号，完成！</li></ul><p>这样，既实现了GBoard字典同步，同时，也保证了G Suite账号在线。</p><p><img src="https://i.loli.net/2018/03/29/5abccce89cad8.jpg" alt="enabled"></p><hr><p><strong>参考</strong>：</p><ul><li>Google Search and Assistant Help Forum: <a href="https://productforums.google.com/forum/#!topic/websearch/xsttdMEmFXc">Gboard dictionary sync greyed out</a></li></ul>]]></content>
    
    
    <summary type="html">something in life</summary>
    
    
    
    
    <category term="Share" scheme="https://pstudio.me/tags/Share/"/>
    
  </entry>
  
  <entry>
    <title>一点感（牢）想（骚）</title>
    <link href="https://pstudio.me/2018/03/paper/"/>
    <id>https://pstudio.me/2018/03/paper/</id>
    <published>2018-03-10T16:17:16.000Z</published>
    <updated>2024-10-28T01:26:52.176Z</updated>
    
    <content type="html"><![CDATA[<p>好久没有更新博客呢，趁着今天还比较闲，赶紧更新下。<span id="more"></span></p><p>首先谈谈最近的事，一是忙于写一个报告，对于我这种提笔就没有话说的，而且还得是一套一套的学术话语，简支是一种折磨！看着别人的文章，心中只有羡慕，为何能写出如此顺口、如此流畅的语句，我想，这大概与我不爱看书有关，总的来说，我不爱看任何书，无论是学习方面的，还是各种小说，每当打开看时，脑袋就是一片空白，尴尬，突然想起有本书还在咕咕咕。二是对一些人与事的看法，在家里，我不愿去与大家做太多的交谈，仔细想想，对于没有共同话语的人，我又为什么要故作姿态地去迎合呢。在学校，老师与同学们的一些想法与做法，有的时候，我觉得是多么的老谋深算，社会社会，一件事或者一句话，为什么还要解读或揣摩呢？三是最近沉迷写Spigot插件，为了在1.13实现服务器的物品小范围传输，故设计了一个<a href="https://github.com/ImyvmCircle/ItemMail">ItemMail</a>插件，通过MySQL实现物品的同步。说到写代码，我劲头十足，从查找资料到逐步完善，扎进去就不愿停下了，尽管还没系统地学习过这类内容，但是，通过查找网络上的资料，以及照着别人的代码的模样，还是将这一功能给基本实现了。不过，还是得找时间将一些细节问题给了解了，不然乱用出问题了可不行。最后一件事谈谈我对开源的看法，我觉得，如果一个项目如果充满着活力，很有前景，那么，开源的话其会更加有发展。但是，如果是一个死气沉沉的项目，就算开源了，也是无人问津。也许不同人对自己创造的东西的看法不同，有的人认为，我辛辛苦苦弄出来的东西，开源了岂不是都不是自己的了。话又说回来，也许外行人看起来是什么高大上的东西，了解的人看了，会发现其实也没啥东西，本子上都写得特别明白了。也许和师长们之间有代沟吧，在这一两年，逐步接触开源社区，大概被洗脑了吧（跑路）。</p><p>当然，生活中遇到的事也不止这些，只是这些事我觉得写出来更好。其实，在假期就想更新下博客的了，但是，一直没能静下心来写点东西，到了学校，又遇到了一堆事。生活也有很多无奈，做了很多不想做却被迫做的事。遇到了很多激情满满的创业者，满满的情怀，但是，每个人对生活的想法不同，每个人对生活的追求也不同。当然，也确实佩服那群人，为了不枉的青春或人生，唉，尽管我也加入了，但是没那种情怀，也许洗脑不够吧！</p><p>不过，想了想读研的收获，大概让自己变得更严谨了吧，以及对事情的看法也有了很大的不同，很佩服那些做学问的，对任何事情都一丝不苟，小至一个符号，一个标点！但是，感觉自己越来越宅了，整天待在PC前面，废寝忘食，哈哈哈哈，也许是自己现在的圈子还没有吧，不足以吸引我去做某些事情。很多事，我也不愿意去思考了，更甘愿做个活在当下的人，但是，时间到了，总是要选择的，到底是屈服于时间的召唤，还是努力去改变时间呢，也还是看当下的自己如何把握当下了。突然想起来一件事，这次立个碑，不立flag了，准备抽点时间来学英语，为了少点悔恨！</p><p>就酱！Good night, all friends.</p>]]></content>
    
    
    <summary type="html">something in life</summary>
    
    
    
    
    <category term="Share" scheme="https://pstudio.me/tags/Share/"/>
    
  </entry>
  
  <entry>
    <title>MC服务器流量端口转发</title>
    <link href="https://pstudio.me/2017/12/iptable/"/>
    <id>https://pstudio.me/2017/12/iptable/</id>
    <published>2017-12-06T18:17:16.000Z</published>
    <updated>2024-10-28T01:26:52.176Z</updated>
    
    <content type="html"><![CDATA[<h3 id="MC服务器流量端口转发"><a href="#MC服务器流量端口转发" class="headerlink" title="MC服务器流量端口转发"></a>MC服务器流量端口转发</h3><p>最近腐竹提供了几台海外的VPS，系统都是CentOS 7.4，准备使用iptable进行端口转发。选择iptable的原因主要还是其支持TCP/UDP，以前用的haproxy尽管配置比较简单，但是不支持UDP，想给其他游戏（像泰拉瑞亚）加速就无能为力了。<span id="more"></span></p><p>首先参考了一篇关于<a href="https://doub.io/ss-jc34/">SS端口转发</a>的教程，参照步骤，当执行到</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service iptables save</span><br></pre></td></tr></table></figure><p>保存iptable配置，控制台提示</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The service command supports only basic LSB actions (start, stop, restart, try-restart, reload, force-reload, status). For other actions, please try to use systemctl.</span><br></pre></td></tr></table></figure><p>看来这样的指令无法操作，将提示扔到Google搜索下，在<a href="https://stackoverflow.com/questions/24756240/how-can-i-use-iptables-on-centos-7">Stackoverflow上有大佬回答</a>，在RHEL 7/CentOS 7中，开始采用<a href="https://fedoraproject.org/wiki/Firewalld?rd=FirewallD">firewalld</a>动态防火墙。这里使用将firewalld禁掉，采用iptables管理。（无奈之举，折腾了一晚上firewalld还是没搞懂，怕把VPS玩坏，改日用闲置的VPS再研究研究）</p><ul><li><p><strong>停止firewalld</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld</span><br></pre></td></tr></table></figure></li></ul><ul><li><p><strong>安装iptables-services</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install iptables-services</span><br></pre></td></tr></table></figure></li></ul><ul><li><p><strong>开启iptables</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable iptables</span><br></pre></td></tr></table></figure></li></ul><p>这样，后继再根据上述教程即可实现端口转发。同时，还要注意云服务器的安全组配置。</p><h3 id="Blog搬至GayHub并开启小绿锁"><a href="#Blog搬至GayHub并开启小绿锁" class="headerlink" title="Blog搬至GayHub并开启小绿锁"></a>Blog搬至GayHub并开启小绿锁</h3><p>由于Rectified Networks Inc.家被攻击了，VPS这段时间无法连接，将Blog迁至GitHub托管。DNS域名解析搬至cloudflare，小绿锁自动开启了owo。</p>]]></content>
    
    
    <summary type="html">coding and cyberslacking make me happy</summary>
    
    
    
    
    <category term="doc" scheme="https://pstudio.me/tags/doc/"/>
    
    <category term="cyberslack" scheme="https://pstudio.me/tags/cyberslack/"/>
    
  </entry>
  
  <entry>
    <title>原来还能这样拔草！</title>
    <link href="https://pstudio.me/2017/11/polygon/"/>
    <id>https://pstudio.me/2017/11/polygon/</id>
    <published>2017-11-01T18:17:16.000Z</published>
    <updated>2024-10-28T01:26:52.176Z</updated>
    
    <content type="html"><![CDATA[<h3 id="What-is-polygon"><a href="#What-is-polygon" class="headerlink" title="What is polygon?"></a>What is polygon?</h3><p>In <a href="https://en.wikipedia.org/wiki/Elementary_geometry">elementary geometry</a>, a <strong>polygon</strong> (<a href="https://en.wikipedia.org/wiki/Help:IPA/English">/ˈpɒlɪɡɒn/</a>) is a <a href="https://en.wikipedia.org/wiki/Plane_(mathematics)">plane</a> <a href="https://en.wikipedia.org/wiki/Shape">figure</a> that is bounded by a finite chain of straight <a href="https://en.wikipedia.org/wiki/Line_segment">line segments</a> closing in a loop to form a closed <a href="https://en.wikipedia.org/wiki/Polygonal_chain">polygonal chain</a> or <em>circuit</em>. (cited from <a href="https://en.wikipedia.org/wiki/Polygon">wikipedia</a> )<span id="more"></span></p><h3 id="近况"><a href="#近况" class="headerlink" title="近况"></a>近况</h3><p>最近一直在学习多边形图形处理方面的知识，非科班出身的我接触到这些知识，首先就是惊叹为什么这些方法这么神奇，同时也充满着迷茫，懵懵懂懂！今天借着除草之际，特将关于多边形图形处理方面的内容记录于此。为啥我要学习这方面的内容呢？与我当前学习的数值算法有关，当解决一个多边形区域内的偏微分方程时，将区域均匀地离散成许多点，对求解精度具有一定的影响。所以，寻找一种理想的离散多边形区域的算法至关重要。前段时间，找到了一篇关于采用区域内点距边界距离函数均匀mesh区域的Paper，受益匪浅，也想亲自写一写来体会其中的奥秘owo。这其中，遇到了几个问题。</p><h3 id="如何判断一点在边界内、边界外、边界上？"><a href="#如何判断一点在边界内、边界外、边界上？" class="headerlink" title="如何判断一点在边界内、边界外、边界上？"></a>如何判断一点在边界内、边界外、边界上？</h3><p>在网路上搜索这类算法，有很多，但是，很多并不完备。我觉得很不错的方法是射线法，这让我觉得好神奇，数学的奥妙！如下说：</p><p><img src="https://i.loli.net/2017/11/02/59f9fd42d637f.png" alt="草图"></p><p>这里的多边形由A、B、C、D、E、F、G 7个顶点围成，其中P1,P2,P3分别为三个判断点。</p><p>射线法的基本步骤是，在判断点处作一条水平或者的竖直的射线，如果射线与图形相交的点数为奇数，则点在图形内部，反之则在图形外部。</p><p>算法的实施基本是遍历每一条边与点或射线的关系。</p><p>这里主要要考虑两种特殊情况，如点P1和P2所示，第一种情况，射线与多边形一条边共线，这里采用的办法是直接不考虑这条边，无视它与射线共线。第二种情况，两条边的交点在射线上，这里处理方法是判断这个交点的纵坐标是否是边端点较大的点，是则记这点为射线与图形的交点，否则忽视。</p><p>具体的Matlab实现代码如下：</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">s</span> = <span class="title">pointInPolygon</span><span class="params">(p, pv)</span></span></span><br><span class="line"><span class="comment">% pv为多边形的个顶点，这里要求为[x,y],p为判断点</span></span><br><span class="line"><span class="comment">% 判断点是否在多边形内部，是返回1，否返回-1，在边界上返回0</span></span><br><span class="line">n = <span class="built_in">length</span>(pv(:,<span class="number">1</span>));</span><br><span class="line">count = <span class="number">0</span>;</span><br><span class="line">s = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:n<span class="number">-1</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">abs</span>((pv(<span class="built_in">i</span>,<span class="number">1</span>)-p(<span class="number">1</span>)).*(pv(<span class="built_in">i</span>+<span class="number">1</span>,<span class="number">2</span>)-p(<span class="number">2</span>))-(pv(<span class="built_in">i</span>+<span class="number">1</span>,<span class="number">1</span>)-p(<span class="number">1</span>)).*(pv(<span class="built_in">i</span>,<span class="number">2</span>)-p(<span class="number">2</span>))) &lt;= <span class="built_in">eps</span> &amp;&amp; ...</span><br><span class="line">            <span class="built_in">min</span>(pv(<span class="built_in">i</span>:<span class="built_in">i</span>+<span class="number">1</span>,<span class="number">1</span>)) &lt;= p(<span class="number">1</span>) &amp;&amp; p(<span class="number">1</span>) &lt;= <span class="built_in">max</span>(pv(<span class="built_in">i</span>:<span class="built_in">i</span>+<span class="number">1</span>,<span class="number">1</span>)) &amp;&amp; ...</span><br><span class="line">            <span class="built_in">min</span>(pv(<span class="built_in">i</span>:<span class="built_in">i</span>+<span class="number">1</span>,<span class="number">2</span>)) &lt;= p(<span class="number">2</span>) &amp;&amp; p(<span class="number">2</span>) &lt;= <span class="built_in">max</span>(pv(<span class="built_in">i</span>:<span class="built_in">i</span>+<span class="number">1</span>,<span class="number">2</span>))   <span class="comment">% p点在边上</span></span><br><span class="line">        s = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">elseif</span> pv(<span class="built_in">i</span>,<span class="number">2</span>) ~= pv(<span class="built_in">i</span>+<span class="number">1</span>,<span class="number">2</span>) &amp;&amp; <span class="built_in">max</span>(pv(<span class="built_in">i</span>:<span class="built_in">i</span>+<span class="number">1</span>,<span class="number">1</span>)) &lt;= p(<span class="number">1</span>)     <span class="comment">% 边s非水平且在射线一侧</span></span><br><span class="line">        <span class="keyword">if</span> any(<span class="built_in">max</span>(pv(<span class="built_in">i</span>:<span class="built_in">i</span>+<span class="number">1</span>,<span class="number">2</span>))==p(<span class="number">2</span>))                         <span class="comment">% 边的端点（纵坐标较大的点）在射线上</span></span><br><span class="line">            count = count + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">elseif</span> <span class="built_in">min</span>(pv(<span class="built_in">i</span>:<span class="built_in">i</span>+<span class="number">1</span>,<span class="number">2</span>)) &lt; p(<span class="number">2</span>) &amp;&amp; p(<span class="number">2</span>) &lt; <span class="built_in">max</span>(pv(<span class="built_in">i</span>:<span class="built_in">i</span>+<span class="number">1</span>,<span class="number">2</span>)) <span class="comment">% 边与射线相交</span></span><br><span class="line">            count = count + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">mod</span>(count,<span class="number">2</span>)==<span class="number">1</span> &amp;&amp; s ~= <span class="number">0</span></span><br><span class="line">    s = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">elseif</span> s ~= <span class="number">0</span></span><br><span class="line">    s = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="如何求得点到多边形边界的距离"><a href="#如何求得点到多边形边界的距离" class="headerlink" title="如何求得点到多边形边界的距离"></a>如何求得点到多边形边界的距离</h3><p>这里比较简单了，计算点到每条边的距离，取最小值。但是，要考虑垂足是否落在边上。这里不赘述，实现的Matlab代码如下:</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">d</span> = <span class="title">pointToSegmentDist</span><span class="params">(p, a, b)</span></span></span><br><span class="line"><span class="comment">% a,b,p均为一点的坐标</span></span><br><span class="line">ab = b - a;</span><br><span class="line">ap = p - a;</span><br><span class="line">t = sum(ab.*ap, <span class="number">2</span>)/sum(ab.*ab, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">if</span> t &lt; <span class="number">0</span></span><br><span class="line">    d = norm(ap);</span><br><span class="line"><span class="keyword">elseif</span> t &gt; <span class="number">1</span></span><br><span class="line">    bp = p - b;</span><br><span class="line">    d = norm(bp);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    ad = t * ab;</span><br><span class="line">    d = norm(ad - ap);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="Be-a-Cyberslacker"><a href="#Be-a-Cyberslacker" class="headerlink" title="Be a Cyberslacker"></a>Be a Cyberslacker</h3><p>日常摸鱼的我，终于学到了一个准确描述摸鱼的单字owo——cyberslack。生生不息，摸鱼不止，已成为摸鱼党的工作信条了。回想过往的半个月，混混沌沌，挖了各种坑，但是不填！无奈，只好将摸鱼之时学到的知识搬到这里来充实一下自己因摸鱼无比空虚的内心owo。抬头一看，又忽然发觉那本还没看完的《撒哈拉的故事》，OTZ，再次立一个flag，下一篇拔草文之前看完owo。最近被老师感染着快要有创业的想法了，只是，总感觉自己要学的内容实在太多了，如果留下来继续的话，会很不安心的owo。如果我学会了优雅地摸鱼，也许我会留下吧。</p><p>Ummm，前些天玩了慢慢罪恶感的Undertale，已经到了最后的关卡了，但是感觉自己已经过不去了qwq，膜拜大神。</p><p>Ummm，昨天是万圣节，看见了竹萌里好多大佬的房子，献上我的膝盖owo，当然，最惬意的还是Trick or treat，真的敲开心owo！</p><p>Ummm，今天是凛喵的生日，很可惜，全部保底，明天集齐50♥看自己是不是非酋。</p><p>Ummm，拔草怎么越拔越不想睡觉呢？但是我已经写不下去了，词穷，滚去睡了~~~~</p><p>Oyasumi! The whole world.</p>]]></content>
    
    
    <summary type="html">code make me happy</summary>
    
    
    
    
    <category term="study" scheme="https://pstudio.me/tags/study/"/>
    
    <category term="cyberslack" scheme="https://pstudio.me/tags/cyberslack/"/>
    
  </entry>
  
  <entry>
    <title>Guassian-Legendre quadrature in Python</title>
    <link href="https://pstudio.me/2017/10/integrate/"/>
    <id>https://pstudio.me/2017/10/integrate/</id>
    <published>2017-10-14T10:37:16.000Z</published>
    <updated>2024-10-28T01:26:52.176Z</updated>
    
    <content type="html"><![CDATA[<p>高斯数值积分这棵草养了很久了，一直想拔掉，苦于可怕的拖延症。今天趁着礼拜六的闲暇之际，将Guassian-Legendre 求积用Python实现了一遍，为以后的MLPG算法编写填点土owo。<span id="more"></span></p><p>以下为高斯-勒让得 求积得演算过程</p><p><img src="https://i.loli.net/2017/10/14/59e1e916e3ac8.png" alt="1"></p><p>得到的结果与Mathematicia结果一致。这里积分域为-1&lt;=x&lt;=1 &amp; -1&lt;=y&lt;=1。</p><p>以下为Python实现代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Integrate</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.x = np.array([<span class="number">2</span>, <span class="number">4</span>])   <span class="comment"># x的积分域</span></span><br><span class="line">        <span class="variable language_">self</span>.y = np.array([<span class="number">1</span>, <span class="number">2</span>])   <span class="comment"># y的积分域</span></span><br><span class="line">        <span class="variable language_">self</span>.w_g = np.array([<span class="number">25</span>/<span class="number">81</span>, <span class="number">40</span>/<span class="number">81</span>, <span class="number">25</span>/<span class="number">81</span>, <span class="number">40</span>/<span class="number">81</span>, <span class="number">64</span>/<span class="number">81</span>, <span class="number">40</span>/<span class="number">81</span>, <span class="number">25</span>/<span class="number">81</span>, <span class="number">40</span>/<span class="number">81</span>, <span class="number">25</span>/<span class="number">81</span>])</span><br><span class="line">        <span class="comment"># 高斯点权值这里采用三点积分</span></span><br><span class="line">        a = np.sqrt(<span class="number">3</span>/<span class="number">5</span>)</span><br><span class="line">        <span class="variable language_">self</span>.g_x = np.array([-a, <span class="number">0</span>, a, -a, <span class="number">0</span>, a, -a, <span class="number">0</span>, a])</span><br><span class="line">        <span class="variable language_">self</span>.g_y = np.array([a, a, a, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, -a, -a, -a])</span><br><span class="line">        <span class="variable language_">self</span>.xi = np.array([])</span><br><span class="line">        <span class="variable language_">self</span>.yi = np.array([])</span><br><span class="line">        <span class="variable language_">self</span>.ans = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">cor</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.xi = (<span class="variable language_">self</span>.x[<span class="number">1</span>]-<span class="variable language_">self</span>.x[<span class="number">0</span>])/<span class="number">2</span>*<span class="variable language_">self</span>.g_x+(<span class="variable language_">self</span>.x[<span class="number">0</span>]+<span class="variable language_">self</span>.x[<span class="number">1</span>])/<span class="number">2</span></span><br><span class="line">        <span class="variable language_">self</span>.yi = (<span class="variable language_">self</span>.y[<span class="number">1</span>]-<span class="variable language_">self</span>.y[<span class="number">0</span>])/<span class="number">2</span>*<span class="variable language_">self</span>.g_y+(<span class="variable language_">self</span>.y[<span class="number">1</span>]+<span class="variable language_">self</span>.y[<span class="number">0</span>])/<span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">integrate</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.ans = (<span class="variable language_">self</span>.x[<span class="number">1</span>]-<span class="variable language_">self</span>.x[<span class="number">0</span>])/<span class="number">2</span>*(<span class="variable language_">self</span>.y[<span class="number">1</span>]-<span class="variable language_">self</span>.y[<span class="number">0</span>])/<span class="number">2</span>*<span class="variable language_">self</span>.w_g.dot(<span class="variable language_">self</span>.xi*<span class="variable language_">self</span>.yi)         <span class="comment"># f=xy</span></span><br></pre></td></tr></table></figure><p>数值积分的形式有许多种，这里仅采用Guassian-Legendre 求积作为示例。</p>]]></content>
    
    
    <summary type="html">some code about numerical analysis</summary>
    
    
    
    
    <category term="study" scheme="https://pstudio.me/tags/study/"/>
    
  </entry>
  
  <entry>
    <title>摸到了一条大金鱼</title>
    <link href="https://pstudio.me/2017/10/get%20a%20fish/"/>
    <id>https://pstudio.me/2017/10/get%20a%20fish/</id>
    <published>2017-10-12T12:17:16.000Z</published>
    <updated>2024-10-28T01:26:52.176Z</updated>
    
    <content type="html"><![CDATA[<p>最近一成不变的摸鱼生活，发掘不出很值得写的生活亮点，但是，避免这颗草长成大树，还是及时拔掉吧。原本想打造的技术博客，由于吾辈B值不够，只好向一本正经胡说八道系列发展了。<span id="more"></span>昨天小论文出版了，心里还是有点暗自窃喜，可是，真正的小论文还没有头绪，没有找到可以完成的明确的主题，坑倒是很多，却不知如何去填。经常有同学回母校来看看，可好几个都是辞职回来的，有时候，我在想，我当初没去工作是不是正确的呢，在学校的时候也还是蛮羡慕在工作的同学，也许这是雾里看花吧。在学校这条学术的道路，我不知道我还能走多远，有时候，想学一种方法，可是当了解到这方法的基本原理后，却不愿再去具体实现，具体写程序实施起来又嫌现有的算法冗赘，可是又找不到好的办法，这样，咕咕咕咕咕。中秋的时候，导师问我有没有读博的意向，我说我还没准备好，umm, 我也蛮喜欢学术这种氛围的，可是，我确实还没准备好勇气、知识、时间等等。</p><p>突然发现又有一段时间没有看书了，怎么没能坚持下去呢？ummm，想想整天没干啥事的我，为什么看上去这么忙碌呢？生生不息，摸鱼不止……在二次元边缘徘徊了这么久，我感觉我渐渐地开始融入这个环境了，两年前，我对番剧有接触的意愿，可是，却始终提不起兴趣，现在，看同一部番剧，感觉居然完全不同owo! 不知是环境在影响我，还是我在影响环境。最近在折腾断裂力学方面的数值模拟，写下来倒还蛮轻松的，可是，结果这玩意却像玄学似的，捉摸不定，这很容易让我陷入摸鱼owo。</p><p>最后，再索索近况哈，今天吃完了一番寄来的看上去很辣却一点也不辣的洗发水，美滋滋！真的很棒，还附带纸巾和不二家的纸棒糖owo。ummm, 突然想起昨天腐烂时居然烫伤了舌头qwq, 美食也不能好好地享受了。ummm, 一本正经地说了这么久了，其实我还是想写篇技术文的，可惜，我不是大佬owo。最后，附上最近摸到的鱼owo。</p><p><img src="https://i.loli.net/2017/10/12/59df678b81dc4.png" alt="fish"></p>]]></content>
    
    
    <summary type="html">something in life</summary>
    
    
    
    
    <category term="Share" scheme="https://pstudio.me/tags/Share/"/>
    
  </entry>
  
  <entry>
    <title>BU</title>
    <link href="https://pstudio.me/2017/09/break_up/"/>
    <id>https://pstudio.me/2017/09/break_up/</id>
    <published>2017-09-23T07:17:16.000Z</published>
    <updated>2024-10-28T01:26:52.176Z</updated>
    
    <content type="html"><![CDATA[<p>昨天元气满满，今天精神恍惚，真滴熬夜的隔天很痛苦。也许是一下子放下了一件事情，然后把自己从高性能模式调整到了节能模式。<span id="more"></span>真的在完成一件事情的过程可能感到绝望、想放弃，但是，当事情结束时，会感到一种莫名的喜悦，也正是这种喜悦让我耐心地走了下去。</p><p>在很多事情上，我与身边很多的人的看法是相左的，孤僻的想法让我与周围的人格格不入，但一旦遇到真正的志趣相投的胖友，不说话也是挺不错的。不过，渐渐地，在看着一些前辈的为人处世，我感觉自己确实是涉世未深的菜鸟。听朋友说，人永远是不自由的，自由不是自己能决定的，可是，我心里想自不自由难道不是自己的想法决定的吗？看自己有没有足够抛弃一切让自己不自由的勇气。但是，如果抛弃了这些，得到的自由也仅是过眼云烟，不经意间又会钻进束缚的牢笼。</p><p>我不喜欢跟随别人的脚步去做事情，不喜欢为了某些利益拼尽全力，不喜欢与别人谈论繁琐无聊的话题。五年，让我改变了很多，也学到了很多。五年前，我愿意隔三叉五地在清晨从30公里外赶到学校陪某人去自习，但不知什么时候，初心不在，或已被忙碌又浮夸的生活所埋没。那时的电话可以一直持续，直到被运营商切断，但不知什么时候这种事情开始让我们感到困扰。是的，正如我们当初说的，你影响我，我影响你。我一直在思考我是不是喜欢将自己孤僻的思想传播给人，是的，不过对别人已经不适用了。我们之间确实有很多不一样的地方，让彼此很不适应，但我选择融合，我相信时间会让这些棱角彻底变得平滑，很多很多事情，。你时常让我憧憬未来，但是，我不愿意去想，也许这个地方我还无法触及。</p><p>最后，关于BU，这我想过，但是无法也不愿放下这份美好，我想一直延续下去，along with you。</p><hr><p>以上话痨发作。。。</p>]]></content>
    
    
    <summary type="html">something in life</summary>
    
    
    
    
    <category term="Screte" scheme="https://pstudio.me/tags/Screte/"/>
    
  </entry>
  
  <entry>
    <title>浅尝Excel</title>
    <link href="https://pstudio.me/2017/09/excel/"/>
    <id>https://pstudio.me/2017/09/excel/</id>
    <published>2017-09-09T18:17:16.000Z</published>
    <updated>2024-10-28T01:26:52.176Z</updated>
    
    <content type="html"><![CDATA[<p>暑期和老教授交流过程中，发现他的文章都是基于Word 和 Excel制作的，令吾辈佩服，感叹其将这俩软件运用得如此精妙。<span id="more"></span>关于论文图表（散点图），在我的学习过程中，一直使用的Origin Lab,这个软件使用起来特别简单，简单折腾下基本就可以上手了。而Excel我用的最多的是与Visual Basic结合，可以实现一些很洋气的功能，而图表制作方面，因为其默认图标风格可能与Paper Publication Quality相差甚远，以及师长们一开始推荐使用Origin Lab,使得对Excel作图感到陌生。</p><p>后来，看了看知乎上关于各作图软件的介绍，以及自己亲手品尝了Excel,才发现，Excel确实强大，no code!</p><p>最后，附上一张默认风格与修改后的图表图片。<br><img src="https://i.loli.net/2017/09/10/59b54a9ba5bcd.png" alt="excel.png"></p>]]></content>
    
    
    <summary type="html">excel charts</summary>
    
    
    
    
    <category term="study" scheme="https://pstudio.me/tags/study/"/>
    
    <category term="paper" scheme="https://pstudio.me/tags/paper/"/>
    
  </entry>
  
</feed>
